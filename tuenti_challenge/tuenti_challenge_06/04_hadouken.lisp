#!/usr/bin/sbcl --script

(load "~/quicklisp/setup.lisp")
(with-output-to-string (*standard-output*) (ql:quickload :split-sequence))
(use-package :split-sequence)

(defun match (pattern line current-combos next-to-last second-to-last combo)
  (if line
      (if pattern
          (if (eq (car line) (car pattern))
              (match (cdr pattern) (cdr line) current-combos line next-to-last (cons (car line) combo))
              (if (= (length pattern) 1)
                  (if (and (eq (car next-to-last) 'RD)
                           (eq (car second-to-last) 'D)
                           (eq (car line) 'R))
                      (search-combos second-to-last (1+ current-combos))
                      (search-combos next-to-last (1+ current-combos)))
                  (let ((next-line (case (car next-to-last)
                                     (RD (if (and (eq (car second-to-last) 'D)
                                                  (eq (car line) 'R)) second-to-last line))
                                     (LD line)
                                     (L line)
                                     (D next-to-last)
                                     (R next-to-last))))
                    (search-combos next-line current-combos))))
          (search-combos line current-combos))
      (if (= (length pattern) 1)
          (1+ current-combos)
          current-combos)))

(defun search-combos (line current-combos )
  (if (cadr line)
      (case (car line)
        (L (match '(LD D RD R P) (cdr line) current-combos line line '(L)))
        (D (case (cadr line)
             (RD (match '(R P) (cddr line) current-combos (cdr line) line '(RD D)))
             (LD (match '(L K) (cddr line) current-combos (cdr line) line '(LD D)))
             (otherwise (search-combos (cdr line) current-combos))))
        (R (case (cadr line)
             (RD (match '(D LD L K) (cddr line) current-combos (cdr line) line '(RD R)))
             (D (match '(RD P) (cddr line) current-combos (cdr line) line '(D R)))
             (otherwise (search-combos (cdr line) current-combos))))
        (otherwise (search-combos (cdr line) current-combos)))
      current-combos))

(defun process-in ()
  (let ((num-cases (read)))
    (dotimes (i num-cases)
      (let* ((line (split-sequence #\- (read-line *standard-input* :remove-empty-subseqs t))))
        (format t "Case #~a: ~a~%" (+ i 1) (search-combos (mapcar #'intern line) 0))))))

(process-in)
